#!/bin/bash

export PATH="/var/vcap/packages/dynatrace-oneagent:$PATH"

export DOWNLOADURL="<%= properties.dynatrace.downloadurl %>"
export PROXY="<%= properties.dynatrace.proxy %>"
export ENV_ID="<%= properties.dynatrace.environmentid %>"
export API_TOKEN="<%= properties.dynatrace.apitoken %>"
export API_URL="<%= properties.dynatrace.apiurl %>"
export SSL_MODE="<%= properties.dynatrace.sslmode %>"
export APP_LOG_CONTENT_ACCESS="<%= properties.dynatrace.applogaccess %>"
export START_HELPER="<%= properties.dynatrace.starthelper %>"

export TMPDIR=/var/vcap/data/tmp

RUN_DIR=/var/vcap/sys/run/dynatrace-oneagent
LOG_DIR=/var/vcap/sys/log/dynatrace-oneagent
LOG_FILE=$LOG_DIR/dynatrace-install.log
if ! mkdir -p ${RUN_DIR} ${LOG_DIR}; then
    installLog "ERROR: Creating directories ${RUN_DIR} and ${LOG_DIR} failed!"
    exit 1
fi

ARGS=""
if [[ "$PROXY" != "" ]]; then
    installLog "Setting proxy to ${PROXY}"
    ARGS="$ARGS PROXY=$PROXY"
    export https_proxy="$PROXY"
    export http_proxy="$PROXY"
fi

if [[ "$APP_LOG_CONTENT_ACCESS" != "" ]]; then
    ARGS="$ARGS APP_LOG_CONTENT_ACCESS=$APP_LOG_CONTENT_ACCESS"
fi

# set downloadurl if not given
if [[ "$DOWNLOADURL" == "" ]]; then
    if [ "x$ENV_ID" == "x" ] && [ "x$API_TOKEN" == "x" ]; then
        installLog "Invalid configuration:"
        installLog "Please set environment ID and API token for Dynatrace OneAgent."
        exit 1
    fi
    if [[ "x$API_URL" == "x" ]]; then
        API_URL="https://$ENV_ID.live.dynatrace.com/api"
    fi
        DOWNLOADURL="$API_URL/v1/deployment/installer/agent/unix/default/latest?Api-Token=$API_TOKEN"
fi

if [[ "$SSL_MODE" == "all" ]]; then
    installLog "accepting all ssl certificates for agent download"
    SSL_INSECURE_CURL="--insecure"
    SSL_INSECURE_WGET="--no-check-certificate"
fi

getInstallDir() {
    local INSTALL_DIR="/opt/dynatrace/oneagent"

    if [[ -d /var/vcap/data ]] && [[ $(df --output=avail -m /var/vcap/data | sed 1d) -gt 2048 ]]; then
        INSTALL_DIR="/var/vcap/data/dynatrace/oneagent"
    fi

    echo ${INSTALL_DIR}
}

getWatchdogPid() {
    #local AGENT_BIN=oneagentos
    local AGENT_WATCHDOG=oneagentwatchdog

    # grep -v "grep" is required, because ps -ef returns also "grep '${AGENT_WATCHDOG}.*${AGENT_BIN}"' process
    # grep -v "sudo" it is enough to use "direct" watchdog pids, filter sudo calls with watchdog params.
    #ps -ef | grep "${AGENT_WATCHDOG}" | grep "${AGENT_BIN}" | grep -v "grep" | grep -v "sudo" | awk ' { print $2 } '
    pgrep -f "${AGENT_WATCHDOG}"
}

downloadAgent() {
    local downloadUrl=$1
    local installerFile=$2

    if curl -h &> /dev/null ; then
        local downloadCommand="curl -f $SSL_INSECURE_CURL ${downloadUrl} -o ${installerFile}"
    elif wget -h &> /dev/null ; then
        local downloadCommand="wget $SSL_INSECURE_WGET ${downloadUrl} -O ${installerFile}"
    else
        installLog "ERROR: Neither curl nor wget executable found!"
        exit 1
    fi

    local retryTimeout=0
    local downloadErrors=0
    while [[ $downloadErrors -lt 3 ]]; do
        sleep $retryTimeout

        $downloadCommand
        if [[ $? != 0 ]]; then
            downloadErrors=$((downloadErrors+1))
            retryTimeout=$(($retryTimeout+5))

            if [[ $downloadErrors -lt 3 ]]; then
                installLog "Dynatrace agent download failed, retrying in $retryTimeout seconds"
            fi
        else
            break
        fi
    done

    if [[ $downloadErrors == 3 ]]; then
        installLog "ERROR: Downloading agent installer failed!"
        exit 1
    fi
}

startOneAgentHelper() {
  #gdn is the daemon for garden-runc >= 1.2.0
  if pgrep -x "gdn" > /dev/null
  then
    installLog "Found gdn process. Starting oneagenthelper..."
    /opt/dynatrace/oneagent/agent/lib64/oneagenthelper -p `pgrep -x gdn` --garden &
  #guardian is the daemon for garden-runc < 1.2.0
  elif pgrep -x "guardian" > /dev/null
  then
    installLog "Found guardian process. Starting oneagenthelper..."
    /opt/dynatrace/oneagent/agent/lib64/oneagenthelper -p `pgrep -x guardian` --garden &
  fi
}

stopOneAgentHelper() {
  if pgrep -x "oneagenthelper" > /dev/null
  then
    installLog "Stopping oneagenthelper..."
    pkill -x oneagenthelper
    installLog "Done"
  fi
}

uninstallOneAgent(){
  installLog "Trying to uninstall the OneAgent..."
  if [[ -f /opt/dynatrace/oneagent/agent/uninstall.sh ]]; then
    installLog "Found uninstall script to run..."
    sh /opt/dynatrace/oneagent/agent/uninstall.sh &>> $LOG_FILE
  fi

  # Stop oneagenthelper
  if [[ "x$START_HELPER" != "x0" ]]; then
    stopOneAgentHelper
  fi

  installLog "Cleaning up /opt/dynatrace/oneagent..."
  rm -rf /opt/dynatrace/oneagent
}

installLog() {
    echo "$1" | tee ${LOG_FILE}
}

case $1 in
  start)
    pid=$(getWatchdogPid)
    # If the watchdog was stopped or rolled over...
    if [[ "$pid" == "" ]]; then
      mkdir -p $TMPDIR
      AGENT_PATH="$TMPDIR/Dynatrace-OneAgent-Linux.sh"
      downloadAgent $DOWNLOADURL $AGENT_PATH
      chmod 755 $AGENT_PATH &>> $LOG_FILE
      install_path=$(getInstallDir)

      if [[ -d /opt/dynatrace/oneagent ]]; then
        installLog "Found leftovers in /opt/dynatrace/oneagent"
        uninstallOneAgent
      fi

      sh $TMPDIR/Dynatrace-OneAgent-Linux.sh $ARGS INSTALL_PATH=$install_path &>> $LOG_FILE

      # Start oneagenthelper manually
      if [[ "x$START_HELPER" != "x0" ]]; then
        installLog "starthelper is enabled"
        startOneAgentHelper
      fi
      pid=$(getWatchdogPid)
    fi
    echo $pid > ${RUN_DIR}/dynatrace-watchdog.pid
    ;;

  stop)
    uninstallOneAgent
    ;;
esac
