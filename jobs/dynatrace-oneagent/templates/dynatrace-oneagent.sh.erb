#!/bin/bash

export PATH="/var/vcap/packages/dynatrace-oneagent:$PATH"

export DOWNLOADURL="<%= properties.dynatrace.downloadurl %>"
export PROXY="<%= properties.dynatrace.proxy %>"
export ENV_ID="<%= properties.dynatrace.environmentid %>"
export API_TOKEN="<%= properties.dynatrace.apitoken %>"
export API_URL="<%= properties.dynatrace.apiurl %>"
export SSL_MODE="<%= properties.dynatrace.sslmode %>"
export APP_LOG_CONTENT_ACCESS="<%= properties.dynatrace.applogaccess %>"
export START_HELPER="<%= properties.dynatrace.starthelper %>"

export TMPDIR="/var/vcap/data/dt_tmp"

RUN_DIR="/var/vcap/sys/run/dynatrace-oneagent"
LOG_DIR="/var/vcap/sys/log/dynatrace-oneagent"
LOG_FILE=$LOG_DIR/dynatrace-install.log
if ! mkdir -p "${RUN_DIR}" "${LOG_DIR}"; then
    installLog "ERROR: Creating directories ${RUN_DIR} and ${LOG_DIR} failed!"
    exit 1
fi

ARGS=""
if [[ "$PROXY" != "" ]]; then
    installLog "Setting proxy to ${PROXY}"
    ARGS="$ARGS PROXY=$PROXY"
    export https_proxy="$PROXY"
    export http_proxy="$PROXY"
fi

# set default to on
if [[ "$APP_LOG_CONTENT_ACCESS" != "" ]]; then
    ARGS="$ARGS APP_LOG_CONTENT_ACCESS=$APP_LOG_CONTENT_ACCESS"
fi

# set downloadurl to fallback if not given
if [[ "$DOWNLOADURL" == "" ]]; then
    if [[ "$ENV_ID" == "" ]] || [[ "$API_TOKEN" == "" ]]; then
        installLog "Invalid configuration:"
        installLog "Please set environment ID and API token for Dynatrace OneAgent."
        exit 1
    fi
    if [[ "$API_URL" == "" ]]; then
        API_URL="https://$ENV_ID.live.dynatrace.com/api"
    fi
    DOWNLOADURL="$API_URL/v1/deployment/installer/agent/unix/default/latest?Api-Token=$API_TOKEN"
fi

SSL_INSECURE_CURL=""
SSL_INSECURE_WGET=""
if [[ "$SSL_MODE" == "all" ]]; then
    installLog "accepting all ssl certificates for agent download"
    SSL_INSECURE_CURL="--insecure"
    SSL_INSECURE_WGET="--no-check-certificate"
fi

INSTALL_BASE_DIR="/var/vcap/data"
if [[ -d ${INSTALL_BASE_DIR} ]] && [[ $(df --output=avail -m ${INSTALL_BASE_DIR} | awk '{if (NR==2) {print $1}}') -gt 2048 ]]; then
    INSTALL_DIR="${INSTALL_BASE_DIR}/dynatrace/oneagent"
else
    installLog "Not enough disk space available on ${INSTALL_BASE_DIR}!"
    exit 1
fi

getWatchdogPid() {
    local AGENT_WATCHDOG="oneagentwatchdog"

    pgrep -f "${AGENT_WATCHDOG}"
}

downloadAgent() {
    local downloadUrl=$1
    local installerFile=$2

    if curl -h &> /dev/null ; then
        local downloadCommand="curl -f --connect-timeout 10 $SSL_INSECURE_CURL ${downloadUrl} -o ${installerFile}"
    elif wget -h &> /dev/null ; then
        local downloadCommand="wget --connect-timeout=10 $SSL_INSECURE_WGET ${downloadUrl} -O ${installerFile}"
    else
        installLog "ERROR: Neither curl nor wget executable found!"
        exit 1
    fi

    local retryTimeout=0
    local downloadErrors=0
    while [[ $downloadErrors -lt 3 ]]; do
        sleep $retryTimeout

        installLog "Downloading agent installer from ${downloadUrl}"
        $downloadCommand
        if [[ $? != 0 ]]; then
            downloadErrors=$((downloadErrors+1))
            retryTimeout=$($retryTimeout+5)

            if [[ $downloadErrors -lt 3 ]]; then
                installLog "Dynatrace agent download failed, retrying in $retryTimeout seconds"
            fi
        else
            break
        fi
    done

    if [[ $downloadErrors == 3 ]]; then
        installLog "ERROR: Downloading agent installer failed!"
        exit 1
    fi
}

startOneAgentHelper() {
    local oneagentHelperCommand="${1}/agent/lib64/oneagenthelper"
  #gdn is the daemon for garden-runc >= 1.2.0
  if gardenProcess=$(pgrep -x "gdn"); then
    installLog "Found gdn process. Starting oneagenthelper..."
  #guardian is the daemon for garden-runc < 1.2.0
  elif gardenProcess=$(pgrep -x "guardian"); then
    installLog "Found guardian process. Starting oneagenthelper..."
  fi

  "${oneagentHelperCommand}" -p "$(pgrep -x "${gardenProcess}")" --garden &
}

stopOneAgentHelper() {
  if pgrep -x "oneagenthelper" > /dev/null
  then
    installLog "Stopping oneagenthelper..."
    pkill -x oneagenthelper
    installLog "Done"
  fi
}

uninstallOneAgent() {
  installLog "Trying to uninstall the OneAgent..."

  local agentDir="${INSTALL_DIR}"
  if [[ ! -d "${agentDir}" ]]; then
      # fallback to cover previous versions of addon
      agentDir="/opt/dynatrace/oneagent"
  fi

  if [[ "$START_HELPER" != "0" ]]; then
    stopOneAgentHelper
  fi

  installLog "Found uninstall script to run..."
  sh "${agentDir}/agent/uninstall.sh" 2>&1 | tee -a ${LOG_FILE}

  installLog "Cleaning up ${agentDir}..."
  rm -rf ${agentDir}

  if [[ -L /opt/dynatrace/oneagent ]]; then
      installLog "Removing symlink /opt/dynatrace/oneagent"
      rm /opt/dynatrace/oneagent
  fi
}

installLog() {
    echo "$1" | tee -a "${LOG_FILE}"
}

case $1 in
  start)
    pid=$(getWatchdogPid)
    if [[ "$pid" == "" ]]; then
      mkdir -p "$TMPDIR"
      INSTALLER_PATH="$TMPDIR/Dynatrace-OneAgent-Linux.sh"
      downloadAgent "$DOWNLOADURL" "$INSTALLER_PATH"

      if [[ -d "${INSTALL_DIR}" ]]; then
        installLog "Found leftovers in ${INSTALL_DIR}"
        uninstallOneAgent
      fi

      sh "${INSTALLER_PATH}" ${ARGS} INSTALL_PATH="$INSTALL_DIR" 2>&1 | tee -a "$LOG_FILE"

      # Start oneagenthelper manually
      if [[ "$START_HELPER" != "0" ]]; then
        installLog "starthelper is enabled"
        startOneAgentHelper "${INSTALL_DIR}"
      fi
      pid=$(getWatchdogPid)
    fi
    echo "$pid" > "${RUN_DIR}/dynatrace-watchdog.pid"

    rm -r "$TMPDIR"
    ;;

  stop)
    uninstallOneAgent
    ;;
esac
