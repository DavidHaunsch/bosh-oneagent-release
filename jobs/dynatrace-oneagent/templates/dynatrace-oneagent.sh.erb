#!/bin/bash
set -e -x

export PATH="/var/vcap/packages/dynatrace-oneagent:$PATH"

export DOWNLOADURL=<%= p('dynatrace.downloadurl') %>
export PROXY=<%= p('dynatrace.proxy') %>
export ENV_ID=<%= p('dynatrace.environmentid') %>
export API_TOKEN=<%= p('dynatrace.apitoken') %>
export API_URL=<%= p('dynatrace.apiurl') %>
export SSL_MODE=<%= p('dynatrace.sslmode') %>
export APP_LOG_CONTENT_ACCESS=<%= p('dynatrace.applogaccess') %>

export TMPDIR=/var/vcap/data/tmp

RUN_DIR=/var/vcap/sys/run/dynatrace-oneagent
CONFIG_DIR=/var/lib/dynatrace/oneagent/agent/config
export LOG_DIR=/var/vcap/sys/log/dynatrace-oneagent
export LOG_FILE=$LOG_DIR/dynatrace-install.log
mkdir -p ${RUN_DIR} ${LOG_DIR}

# Source helper functions
source /var/vcap/jobs/dynatrace-oneagent/bin/common.sh

ARGS=""
if [ "$PROXY" != "" ]; then
  ARGS="$ARGS PROXY=$PROXY"
  export https_proxy="$PROXY"
  export http_proxy="$PROXY"
fi

if [ "$APP_LOG_CONTENT_ACCESS" != "" ]; then
  ARGS="$ARGS APP_LOG_CONTENT_ACCESS=$APP_LOG_CONTENT_ACCESS"
fi

# set downloadurl if not given
if [ "$DOWNLOADURL" == "" ]; then
  if [ "x$ENV_ID" == "x" ] && [ "x$API_TOKEN" == "x" ]; then
    toLogError "Invalid configuration:" 
    toLogError "Please set environment ID and API token for Dynatrace OneAgent." 
    exit 1
  fi
  if [ "x$API_URL" == "x" ]; then
    API_URL="https://$ENV_ID.live.dynatrace.com/api"
  fi
  DOWNLOADURL="$API_URL/v1/deployment/installer/agent/unix/default/latest?Api-Token=$API_TOKEN"
fi

SSL_FLAG=""
if [ "$SSL_MODE" == "all" ]; then
  toLogInfo "Accepting all ssl certificates for agent download" 
  SSL_FLAG="--insecure"
fi

getInstallDir() {
        local INSTALL_DIR="/opt/dynatrace/oneagent"

        if [ -d /var/vcap/data ] && [ $(df --output=avail -m /var/vcap/data | sed 1d) -gt 2048 ]; then
          INSTALL_DIR="/var/vcap/data/dynatrace/oneagent"
        fi

        echo ${INSTALL_DIR}
}

getWatchdogPid() {
        local AGENT_BIN=oneagentos
        local AGENT_WATCHDOG=oneagentwatchdog

        # grep -v "grep" is required, because ps -ef returns also "grep '${AGENT_WATCHDOG}.*${AGENT_BIN}"' process
        # grep -v "sudo" it is enough to use "direct" watchdog pids, filter sudo calls with watchdog params.
        ps -ef | grep "${AGENT_WATCHDOG}" | grep "${AGENT_BIN}" | grep -v "grep" | grep -v "sudo" | awk ' { print $2 } '
}

uninstallOneAgent(){
  toLogInfo "Trying to uninstall the OneAgent..."
  if [ -f /opt/dynatrace/oneagent/agent/uninstall.sh ]; then
    toLogInfo "Found uninstall script to run..."
    sh /opt/dynatrace/oneagent/agent/uninstall.sh  >> $LOG_FILE 2>> $LOG_FILE
  fi

  toLogInfo "Cleaning up /opt/dynatrace/oneagent..." 
  rm -rf /opt/dynatrace/oneagent
}


case $1 in
  start)
    toLogInfo "Starting installation of OneAgent..."
    pid=$(getWatchdogPid)
    # If the watchdog was stopped or rolled over...
    if [ "$pid" == "" ]; then
      mkdir -p $TMPDIR
      toLogInfo "Downloading OneAgent..."
      curl -L $SSL_FLAG -o $TMPDIR/Dynatrace-OneAgent-Linux.sh $DOWNLOADURL >> $LOG_FILE 2>> $LOG_FILE
      chmod 755 $TMPDIR/Dynatrace-OneAgent-Linux.sh >> $LOG_FILE 2>> $LOG_FILE
      install_path=$(getInstallDir)
      toLogInfo "Installation target: $install_path"
      if [ -d /opt/dynatrace/oneagent ]; then
        toLogInfo "Found leftovers in /opt/dynatrace/oneagent"
        uninstallOneAgent
      fi

      sh $TMPDIR/Dynatrace-OneAgent-Linux.sh $ARGS INSTALL_PATH=$install_path >> $LOG_FILE 2>> $LOG_FILE
      toLogInfo "Installation completed"
      pid=$(getWatchdogPid)
    fi
    echo $pid > ${RUN_DIR}/dynatrace-watchdog.pid
    toLogInfo "Setting host tags..."
    <% if p('dynatrace.host_tags').blank? %>
    > $CONFIG_DIR/hostautotag.conf
    <% else %>
    echo "<%= p('dynatrace.host_tags') %>" > ${CONFIG_DIR}/hostautotag.conf
    <% end %>
    ;;

  stop)
    uninstallOneAgent
    ;;
esac
